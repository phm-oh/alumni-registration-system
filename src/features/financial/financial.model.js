// Path: src/features/financial/financial.model.js
// ‡πÑ‡∏ü‡∏•‡πå: financial.model.js - Database Models ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô

import mongoose from 'mongoose';

// ===============================================
// üí∞ Expense Model - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
// ===============================================

const expenseSchema = new mongoose.Schema({
  title: {
    type: String,
    required: [true, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'],
    trim: true
  },
  description: {
    type: String,
    trim: true
  },
  amount: {
    type: Number,
    required: [true, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'],
    min: [0, '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0']
  },
  category: {
    type: String,
    required: [true, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'],
    enum: [
      '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',           // Shipping costs
      '‡∏Ñ‡πà‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',        // Operation costs
      '‡∏Ñ‡πà‡∏≤‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£',          // Communication costs
      '‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',    // Office supplies
      '‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',       // Event costs
      '‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',          // Travel expenses
      '‡∏Ñ‡πà‡∏≤‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤',       // Maintenance costs
      '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'               // Others
    ]
  },
  date: {
    type: Date,
    required: [true, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢'],
    default: Date.now
  },
  receiptUrl: {
    type: String  // Cloudinary URL ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
  },
  status: {
    type: String,
    enum: ['‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò', '‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß'],
    default: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'
  },
  approvedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  approvedAt: {
    type: Date
  },
  approvalNotes: {
    type: String,
    trim: true
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tracking ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  statusHistory: [{
    status: String,
    notes: String,
    updatedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    updatedAt: {
      type: Date,
      default: Date.now
    }
  }]
}, {
  timestamps: true
});

// Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
expenseSchema.index({ category: 1, date: -1 });
expenseSchema.index({ createdBy: 1, status: 1 });
expenseSchema.index({ status: 1, createdAt: -1 });

// Virtual ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö formatted amount
expenseSchema.virtual('formattedAmount').get(function() {
  return new Intl.NumberFormat('th-TH', {
    style: 'currency',
    currency: 'THB'
  }).format(this.amount);
});

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
expenseSchema.methods.updateStatus = function(newStatus, notes, userId) {
  this.status = newStatus;
  
  if (newStatus === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') {
    this.approvedBy = userId;
    this.approvedAt = new Date();
    this.approvalNotes = notes;
  }
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  this.statusHistory.push({
    status: newStatus,
    notes: notes,
    updatedBy: userId,
    updatedAt: new Date()
  });
};

// ===============================================
// üìä FinancialPeriod Model - ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
// ===============================================

const financialPeriodSchema = new mongoose.Schema({
  year: {
    type: Number,
    required: [true, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏µ'],
    min: [2020, '‡∏õ‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 2020']
  },
  month: {
    type: Number,
    required: [true, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'],
    min: [1, '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-12'],
    max: [12, '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-12']
  },
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
  totalRevenue: {
    type: Number,
    default: 0,
    min: [0, '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö']
  },
  membershipFees: {
    type: Number,
    default: 0
  },
  shippingFees: {
    type: Number,
    default: 0
  },
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
  totalExpenses: {
    type: Number,
    default: 0,
    min: [0, '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö']
  },
  expensesByCategory: {
    type: Map,
    of: Number,
    default: {}
  },
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  netProfit: {
    type: Number,
    default: 0
  },
  
  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  newMemberCount: {
    type: Number,
    default: 0,
    min: [0, '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö']
  },
  totalMemberCount: {
    type: Number,
    default: 0,
    min: [0, '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö']
  },
  
  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
  shippingCount: {
    type: Number,
    default: 0
  },
  pickupCount: {
    type: Number,
    default: 0
  },
  
  // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì/‡∏™‡∏£‡∏∏‡∏õ
  isCalculated: {
    type: Boolean,
    default: false
  },
  calculatedAt: {
    type: Date
  },
  calculatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  
  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
  notes: {
    type: String,
    trim: true
  }
}, {
  timestamps: true
});

// Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
financialPeriodSchema.index({ year: -1, month: -1 }, { unique: true });
financialPeriodSchema.index({ isCalculated: 1, createdAt: -1 });

// Virtual ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö period name
financialPeriodSchema.virtual('periodName').get(function() {
  const months = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];
  return `${months[this.month - 1]} ${this.year + 543}`;
});

// Virtual ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö formatted values
financialPeriodSchema.virtual('formattedRevenue').get(function() {
  return new Intl.NumberFormat('th-TH', {
    style: 'currency',
    currency: 'THB'
  }).format(this.totalRevenue);
});

financialPeriodSchema.virtual('formattedExpenses').get(function() {
  return new Intl.NumberFormat('th-TH', {
    style: 'currency',
    currency: 'THB'
  }).format(this.totalExpenses);
});

financialPeriodSchema.virtual('formattedNetProfit').get(function() {
  return new Intl.NumberFormat('th-TH', {
    style: 'currency',
    currency: 'THB'
  }).format(this.netProfit);
});

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì net profit
financialPeriodSchema.methods.calculateNetProfit = function() {
  this.netProfit = this.totalRevenue - this.totalExpenses;
  return this.netProfit;
};

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
financialPeriodSchema.methods.markAsCalculated = function(userId) {
  this.isCalculated = true;
  this.calculatedAt = new Date();
  this.calculatedBy = userId;
  this.calculateNetProfit();
};

// Static method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ period ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
financialPeriodSchema.statics.findCurrentPeriod = function() {
  const now = new Date();
  return this.findOne({
    year: now.getFullYear(),
    month: now.getMonth() + 1
  });
};

// Static method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á period ‡πÉ‡∏´‡∏°‡πà
financialPeriodSchema.statics.createPeriod = function(year, month) {
  return this.create({
    year,
    month,
    totalRevenue: 0,
    totalExpenses: 0,
    netProfit: 0,
    newMemberCount: 0,
    totalMemberCount: 0,
    shippingCount: 0,
    pickupCount: 0,
    expensesByCategory: new Map()
  });
};

// ===============================================
// üìà PaymentSummary Model - ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
// ===============================================

const paymentSummarySchema = new mongoose.Schema({
  date: {
    type: Date,
    required: true,
    unique: true
  },
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  totalPayments: {
    type: Number,
    default: 0
  },
  membershipPayments: {
    type: Number,
    default: 0
  },
  shippingPayments: {
    type: Number,
    default: 0
  },
  
  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞
  paymentCount: {
    type: Number,
    default: 0
  },
  transferCount: {
    type: Number,
    default: 0  // ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
  },
  cashCount: {
    type: Number,
    default: 0  // ‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
  },
  
  // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å
  departmentBreakdown: {
    type: Map,
    of: {
      count: { type: Number, default: 0 },
      amount: { type: Number, default: 0 }
    },
    default: {}
  },
  
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ
  isSummarized: {
    type: Boolean,
    default: false
  },
  summarizedAt: {
    type: Date
  },
  summarizedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }
}, {
  timestamps: true
});

// Index
paymentSummarySchema.index({ date: -1 });
paymentSummarySchema.index({ isSummarized: 1 });

// Virtual ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö formatted date
paymentSummarySchema.virtual('formattedDate').get(function() {
  return this.date.toLocaleDateString('th-TH');
});

// ===============================================
// üì§ Export Models
// ===============================================

const Expense = mongoose.model('Expense', expenseSchema);
const FinancialPeriod = mongoose.model('FinancialPeriod', financialPeriodSchema);
const PaymentSummary = mongoose.model('PaymentSummary', paymentSummarySchema);

export { Expense, FinancialPeriod, PaymentSummary };
export default { Expense, FinancialPeriod, PaymentSummary };