// Path: src/features/financial/financial.routes.js
// ‡πÑ‡∏ü‡∏•‡πå: financial.routes.js - API Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô

import express from 'express';
import {
  // Expense Controllers
  createExpenseController,
  getExpensesController,
  getExpenseByIdController,
  updateExpenseController,
  updateExpenseStatusController,
  deleteExpenseController,
  
  // Financial Period Controllers
  getFinancialPeriodsController,
  getCurrentFinancialPeriodController,
  calculateFinancialPeriodController,
  
  // Dashboard & Statistics Controllers
  getFinancialDashboardController,
  getRevenueStatisticsController,
  getExpenseStatisticsController,
  getFinancialReportsController,
  
  // Export & Utility Controllers
  exportFinancialDataController,
  getPendingPaymentsController,
  getFinancialOptionsController,
  getFinancialSummaryController
} from './financial.controller.js';

import { authMiddleware, adminMiddleware } from '../../middlewares/auth.middleware.js';
import { upload } from '../../utils/upload.js';

const router = express.Router();

// ============================================
// üîí ‡∏ó‡∏∏‡∏Å route ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô authentication
// ============================================
router.use(authMiddleware);

// ============================================
// üìä DASHBOARD & SUMMARY ROUTES (‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô)
// ============================================

/**
 * ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
 * GET /api/financial/summary
 */
router.get('/summary', getFinancialSummaryController);

/**
 * Dashboard ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
 * GET /api/financial/dashboard
 */
router.get('/dashboard', getFinancialDashboardController);

/**
 * ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI (‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞, ‡∏õ‡∏µ, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
 * GET /api/financial/options
 */
router.get('/options', getFinancialOptionsController);

// ============================================
// üí∞ EXPENSE ROUTES (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô admin)
// ============================================

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° filters)
 * GET /api/financial/expenses?category=‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á&status=‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£&page=1&limit=20
 */
router.get('/expenses', adminMiddleware, getExpensesController);

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à)
 * POST /api/financial/expenses
 * Body: { title, description, amount, category, date }
 * File: receipt (optional)
 */
router.post('/expenses', adminMiddleware, upload.single('receipt'), createExpenseController);

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏≤‡∏° ID
 * GET /api/financial/expenses/:id
 */
router.get('/expenses/:id', adminMiddleware, getExpenseByIdController);

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏´‡∏°‡πà)
 * PUT /api/financial/expenses/:id
 * Body: { title, description, amount, category, date }
 * File: receipt (optional)
 */
router.put('/expenses/:id', adminMiddleware, upload.single('receipt'), updateExpenseController);

/**
 * ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
 * PATCH /api/financial/expenses/:id/status
 * Body: { status: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'|'‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'|'‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß', notes: '‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•' }
 */
router.patch('/expenses/:id/status', adminMiddleware, updateExpenseStatusController);

/**
 * ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
 * DELETE /api/financial/expenses/:id
 */
router.delete('/expenses/:id', adminMiddleware, deleteExpenseController);

// ============================================
// üìÖ FINANCIAL PERIOD ROUTES (admin only)
// ============================================

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Financial Periods
 * GET /api/financial/periods?year=2025&month=1&isCalculated=true
 */
router.get('/periods', adminMiddleware, getFinancialPeriodsController);

/**
 * ‡∏î‡∏∂‡∏á Financial Period ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * GET /api/financial/periods/current
 */
router.get('/periods/current', adminMiddleware, getCurrentFinancialPeriodController);

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Financial Period
 * POST /api/financial/periods/calculate
 * Body: { year: 2025, month: 1 }
 */
router.post('/periods/calculate', adminMiddleware, calculateFinancialPeriodController);

// ============================================
// üìà STATISTICS ROUTES (admin only)
// ============================================

/**
 * ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
 * GET /api/financial/statistics/revenue?startDate=2025-01-01&endDate=2025-01-31
 */
router.get('/statistics/revenue', adminMiddleware, getRevenueStatisticsController);

/**
 * ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
 * GET /api/financial/statistics/expenses?startDate=2025-01-01&endDate=2025-01-31
 */
router.get('/statistics/expenses', adminMiddleware, getExpenseStatisticsController);

// ============================================
// üìä REPORTS ROUTES (admin only)
// ============================================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
 * GET /api/financial/reports?type=summary&startDate=2025-01-01&endDate=2025-01-31
 * Types: summary (default), revenue, expenses
 */
router.get('/reports', adminMiddleware, getFinancialReportsController);

// ============================================
// üì§ EXPORT ROUTES (admin only)
// ============================================

/**
 * Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
 * GET /api/financial/export?type=expenses&format=json&startDate=2025-01-01&endDate=2025-01-31
 * Types: expenses, revenue, periods
 * Formats: json (csv, excel ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
 */
router.get('/export', adminMiddleware, exportFinancialDataController);

// ============================================
// üí∏ PENDING PAYMENTS ROUTES (admin only)
// ============================================

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
 * GET /api/financial/pending-payments
 */
router.get('/pending-payments', adminMiddleware, getPendingPaymentsController);

// ============================================
// üîß MAINTENANCE ROUTES (admin only)
// ============================================

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Financial Period ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö maintenance)
 * POST /api/financial/recalculate-all
 * Body: { year?: number, confirm: true }
 */
router.post('/recalculate-all', adminMiddleware, async (req, res) => {
  try {
    const { year, confirm } = req.body;
    
    if (!confirm) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ confirm: true'
      });
    }
    
    const targetYear = year || new Date().getFullYear();
    const results = [];
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    for (let month = 1; month <= 12; month++) {
      try {
        const { calculateFinancialPeriod } = await import('./financial.service.js');
        const period = await calculateFinancialPeriod(targetYear, month, req.user.id);
        results.push({
          year: targetYear,
          month,
          success: true,
          revenue: period.totalRevenue,
          expenses: period.totalExpenses,
          netProfit: period.netProfit
        });
      } catch (error) {
        results.push({
          year: targetYear,
          month,
          success: false,
          error: error.message
        });
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    
    return res.status(200).json({
      success: true,
      message: `‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount}/12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`,
      data: {
        year: targetYear,
        results,
        summary: {
          total: 12,
          success: successCount,
          failed: 12 - successCount
        }
      }
    });
  } catch (error) {
    console.error('Error in recalculate-all:', error);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà',
      error: error.message
    });
  }
});

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Financial API
 * GET /api/financial/test
 */
router.get('/test', (req, res) => {
  res.status(200).json({
    success: true,
    message: 'Financial API is working! üí∞',
    timestamp: new Date(),
    user: {
      id: req.user.id,
      role: req.user.role
    },
    availableEndpoints: [
      'GET /api/financial/summary',
      'GET /api/financial/dashboard',
      'GET /api/financial/options',
      'GET /api/financial/expenses',
      'POST /api/financial/expenses',
      'GET /api/financial/periods',
      'POST /api/financial/periods/calculate',
      'GET /api/financial/statistics/revenue',
      'GET /api/financial/statistics/expenses',
      'GET /api/financial/reports',
      'GET /api/financial/export',
      'GET /api/financial/pending-payments'
    ]
  });
});

// ============================================
// üìã Route Documentation & Examples
// ============================================
/*
üî• FINANCIAL API ROUTES DOCUMENTATION

üìä DASHBOARD ROUTES:
GET /api/financial/summary                     # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
GET /api/financial/dashboard                   # Dashboard ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
GET /api/financial/options                     # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI

üí∞ EXPENSE MANAGEMENT:
GET    /api/financial/expenses                 # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ (‡πÉ‡∏ä‡πâ filters ‡πÑ‡∏î‡πâ)
POST   /api/financial/expenses                 # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ + ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
GET    /api/financial/expenses/:id             # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏≤‡∏° ID
PUT    /api/financial/expenses/:id             # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
PATCH  /api/financial/expenses/:id/status      # ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
DELETE /api/financial/expenses/:id             # ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢

üìÖ FINANCIAL PERIODS:
GET  /api/financial/periods                    # ‡∏î‡∏∂‡∏á periods ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
GET  /api/financial/periods/current            # Period ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
POST /api/financial/periods/calculate          # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì period

üìà STATISTICS & REPORTS:
GET /api/financial/statistics/revenue          # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
GET /api/financial/statistics/expenses         # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
GET /api/financial/reports                     # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô

üì§ EXPORT & UTILITIES:
GET /api/financial/export                      # Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
GET /api/financial/pending-payments            # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞

üîß MAINTENANCE:
POST /api/financial/recalculate-all            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
GET  /api/financial/test                       # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API

üéØ EXAMPLE REQUESTS:

1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢:
POST /api/financial/expenses
Content-Type: multipart/form-data
{
  "title": "‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏",
  "description": "‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
  "amount": 500,
  "category": "‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
  "date": "2025-01-15"
}
File: receipt

2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ (‡∏û‡∏£‡πâ‡∏≠‡∏° filters):
GET /api/financial/expenses?category=‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á&status=‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£&page=1&limit=20&startDate=2025-01-01&endDate=2025-01-31

3. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö:
GET /api/financial/statistics/revenue?startDate=2025-01-01&endDate=2025-01-31

4. Export ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢:
GET /api/financial/export?type=expenses&format=json&startDate=2025-01-01&endDate=2025-01-31

üîê AUTHENTICATION:
- ‡∏ó‡∏∏‡∏Å route ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Authorization: Bearer <jwt_token>
- Dashboard routes: ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (auth required)
- Admin routes: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô admin role
*/

export default router;